// Домашнее задание #5. Регулярные выражения.
// https://edu.mmcs.sfedu.ru/mod/assign/view.php?id=19014

/*

1. (Count) 
Написать функцию, которая определяет количество входящих в заданную строку почтовых индексов 
(почтовый индекс состоит из 6 цифр).

2. (Regex.Replace) 
Дана строка — предложение на русском языке.
Поменять местами первую и последнюю буквы каждого слова.

3. Дана строка. Посчитать, сколько смайликов в ней содержится.
Смайликом будем считать последовательность символов, удовлетворяющую условиям:
первым символом является либо ; (точка с запятой) либо : (двоеточие) ровно один раз
далее может идти символ - (минус) сколько угодно раз (в том числе символ минус может идти ноль раз)
в конце обязательно идет некоторое количество (не меньше одной) одинаковых скобок из следующего набора:
(, ), [, ].
внутри смайлика не может встречаться никаких других символов.

4. (Regex.Replace) 
Дана строка, содержащая помимо прочей информации номера телефонов в федеральном формате.
Скрыть все цифры городской части номера кроме самой первой под символами x.
Например, если в тексте имелся номер +7 (863) 297-51-11, 
то после преобразования он должен выглядеть как +7 (863) 2xx-xx-xx.
Считать, что код города может содержать от трёх до пяти цифр, 
а городской номер — от 7 до 5 цифр соответственно.

5. Выяснить, какими могут быть российские автомобильные номера (с кодом региона),
составить соответствующее регулярное выражение и написать функцию,
которая находит в строке все автомобильные номера и возвращает их в виде последовательности.

6. Дана строка. Сохранить в новую строку все содержащиеся в нём IPv4-адреса 
в десятичной записи с точками через разделитель.
 
 */

using System.Runtime.CompilerServices;
using System.Text;
using System.Text.RegularExpressions;

namespace HW_05
{
    public static class HW_05
    {
        /// <summary>
        /// 1. (Count) 
        /// Написать функцию, которая определяет количество входящих в заданную строку почтовых индексов
        /// (почтовый индекс состоит из 6 цифр).
        /// </summary>
        public static int HW_05_01(string s) =>
            Regex.Count(s, @"(^|\D)(\d{6})(\D|$)");

        /// <summary>
        /// 2. (Regex.Replace) 
        /// Дана строка — предложение на русском языке.
        /// Поменять местами первую и последнюю буквы каждого слова.
        /// </summary>
        public static string HW_05_02(this string s) =>
            Regex.Replace(s, @"(^|\b)(\w+)(\b|$)", m =>
            {
                string s = m.Value;
                string result = s.Last().ToString();

                result +=
                    //Слова из двух букв
                    s.Length == 2 ? s[0] :
                    //Слова из трёх и более букв
                    s.Length >= 3 ? s.Substring(1, s.Length - 2) + s[0] : "";

                return result;
            });

        /// <summary>
        /// 3. Дана строка. Посчитать, сколько смайликов в ней содержится.
        /// Смайликом будем считать последовательность символов, удовлетворяющую условиям:
        /// первым символом является либо; (точка с запятой) либо : (двоеточие) ровно один раз
        /// далее может идти символ - (минус) сколько угодно раз(в том числе символ минус может идти ноль раз)
        /// в конце обязательно идет некоторое количество(не меньше одной) одинаковых скобок из следующего набора:
        /// (, ), [,].
        /// внутри смайлика не может встречаться никаких других символов.
        /// </summary>
        public static int HW_05_03(string s) =>
               Regex.Count(s, @"(;|:){1}-*(\(+|\)+|\[+|\]+)");

        /// <summary>
        /// 4. (Regex.Replace) 
        /// Дана строка, содержащая помимо прочей информации номера телефонов в федеральном формате.
        /// Скрыть все цифры городской части номера кроме самой первой под символами x.
        /// Например, если в тексте имелся номер +7 (863) 297-51-11, 
        /// то после преобразования он должен выглядеть как +7 (863) 2xx-xx-xx.
        /// Считать, что код города может содержать от трёх до пяти цифр,
        /// а городской номер — от 7 до 5 цифр соответственно.
        /// </summary>
        public static string HW_05_04(this string s) =>
            // (?:\+7|8) - не захватывающая группа без нумерации = +7 или 8
            // (\s|-|) - группа 1 = пробел или дефис или отсутствие символа
            // \( (\d{3,5}) \) - экранированные скобки, группа 2 = код города от трёх до пяти цифр
            // \1 - повтор группы 1
            // (\d{1,3}) - группа 3 = от 1 до 3 первых цифр городского номера
            // (?: -\d\d){2} - не захватывающая группа без нумерации =
            // = дефис и два цифровых символа, повторить дважды = последние 4 цифры городского номера
            Regex.Replace(s, @"(?:\+7|8)(\s|-|)\((\d{3,5})\)\1(\d{1,3})(?:-\d\d){2}", m =>
            {
                int l2 = m.Groups[2].Length;
                int l3 = m.Groups[3].Length;

                //Строка содержит не 11 цифр
                if (l2 + l3 != 6)
                    return m.Value;

                //Группа 3 после замены всех цифр кроме первой
                string g3 = "" + m.Groups[3].Value.First() + (
                    l3 == 3 ? "xx" :
                    l3 == 2 ? "x" : ""
                    );

                return $"+7 ({m.Groups[2]}) {g3}-xx-xx";
            });

        /// <summary>
        /// 5. Выяснить, какими могут быть российские автомобильные номера (с кодом региона),
        /// составить соответствующее регулярное выражение и написать функцию,
        /// которая находит в строке все автомобильные номера 
        /// и возвращает их в виде последовательности.
        /// </summary>
        /// <remarks>
        /// Судя по статье на википедии форматов номеров в России очень много:
        /// а123бв - стандартные, устаревшие, для должностных лиц 
        /// аб123 - такси
        /// аб1234 - полуприцепы и прицепы, снегоходы, мотовездеходы, военные, временные
        /// 1234аб - трактора, мотоциклы, военные , устаревшие
        /// аб12вг - мопеды
        /// 123xy4 - дипломатические, консульские
        /// 123x456 - дипломатические, консульские
        /// x12345 - дипломатические, консульские
        /// аб123в - временные, устаревшие
        /// абв123 - временные, ретро, спортивные
        /// а1234 - МВД
        /// 123а - МВД
        /// 1234а - МВД
        /// а123бв - ретро
        /// 123а456 - устаревшее
        /// Для каждого формата есть ограничения по используемым буквам и цифрам. 
        /// Решение честно украдено https://regex101.com/r/q1lACR/2
        /// https://ru.stackoverflow.com/questions/824896/%D0%A0%D0%B5%D0%B3%D1%83%D0%BB%D1%8F%D1%80%D0%BD%D0%BE%D0%B5-%D0%B2%D1%8B%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B4%D0%BB%D1%8F-%D1%80%D1%83%D1%81%D1%81%D0%BA%D0%BE%D0%B3%D0%BE-%D0%B0%D0%B2%D1%82%D0%BE%D0%BC%D0%BE%D0%B1%D0%B8%D0%BB%D1%8C%D0%BD%D0%BE%D0%B3%D0%BE-%D0%BD%D0%BE%D0%BC%D0%B5%D1%80%D0%B0
        /// </remarks>
        public static IEnumerable<string> HW_05_05(this string s)
        {
            string pattern =
                @"(" +
                @"([АВЕКМНОРСТУХ]\d{3}(?<!000)[АВЕКМНОРСТУХ]{1,2})(\d{2,3})|" +
                @"(\d{4}(?<!0000)[АВЕКМНОРСТУХ]{2})(\d{2})|" +
                @"(\d{3}(?<!000)(C?D|[ТНМВКЕ])\d{3}(?<!000))(\d{2}(?<!00))|" +
                @"([ТСК][АВЕКМНОРСТУХ]{2}\d{3}(?<!000))(\d{2})|" +
                @"([АВЕКМНОРСТУХ]{2}\d{3}(?<!000)[АВЕКМНОРСТУХ])(\d{2})|" +
                @"([АВЕКМНОРСТУХ]\d{4}(?<!0000))(\d{2})|" +
                @"(\d{3}(?<!000)[АВЕКМНОРСТУХ])(\d{2})|" +
                @"(\d{4}(?<!0000)[АВЕКМНОРСТУХ])(\d{2})|" +
                @"([АВЕКМНОРСТУХ]{2}\d{4}(?<!0000))(\d{2})|" +
                @"([АВЕКМНОРСТУХ]{2}\d{3}(?<!000))(\d{2,3})|" +
                @"(^Т[АВЕКМНОРСТУХ]{2}\d{3}(?<!000)\d{2,3})" +
                @")";
            MatchCollection matches = Regex.Matches(s, pattern, RegexOptions.IgnorePatternWhitespace);
            foreach (Match m in matches)
                yield return m.Value;
        }

        /// <summary>
        /// 6. Дана строка. Сохранить в новую строку все содержащиеся в нём IPv4-адреса 
        /// в десятичной записи с точками через разделитель.
        /// </summary>
        public static string HW_05_06(this string s, string delimiter)
        {
            string pattern =
                @"(?<!\d)" +
                @"((?:(?:[01]?\d?\d?)       | (?:2[0-4]\d) | (?:25[0-5]))\.) {3}" +
                @"((     [01]?\d?\d?(?!\d)) |   (2[0-4]\d) |   (25[0-5]))";
            MatchCollection matches = 
                Regex.Matches(s, pattern, RegexOptions.IgnorePatternWhitespace);
            StringBuilder sb = new();

            foreach (Match m in matches)
                sb.Append(m.Value + delimiter);
            sb.Remove(sb.Length - delimiter.Length, delimiter.Length);

            return sb.ToString();
        }
    }
}

