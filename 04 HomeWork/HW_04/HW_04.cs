//Домашнее задание #4
//https://edu.mmcs.sfedu.ru/mod/assign/view.php?id=18970


/*
1. Дано целое число K (> 0) и строковая последовательность A. 
Строки последовательности содержат только цифры и буквы. 
Извлечь из A все строки длины K, оканчивающиеся цифрой, 
отсортировав их в лексикографическом порядке по возрастанию. 
(Используем Where, OrderBy, Last, char.IsDigit)

2. Дано целое число K (> 0) и целочисленная последовательность A. 
Начиная с элемента A с порядковым номером K, извлечь из A все нечетные двузначные числа, 
отсортировав их по убыванию. (SkipWhile, Where, OrderByDescending)

3. Дано целое число D и целочисленная последовательность A. 
Начиная с первого элемента A, большего D, извлечь из A все нечетные положительные числа, 
поменяв порядок извлеченных чисел на обратный. (SkipWhile, Where, OrderByDescending)

4. Даны целые числа D и K (K > 0) и целочисленная последовательность A. 
Найти объединение двух фрагментов A: первый содержит все элементы до первого элемента, большего D
(не включая его), а второй — все элементы, начиная с элемента с порядковым номером K. 
Полученную последовательность (не содержащую одинаковых элементов) отсортировать по убыванию. 
(TakeWhile, Skip, OrderByDescending)

5. Дана последовательность непустых строк A. 
Получить последовательность символов, каждый элемент которой является начальным символом 
соответствующей строки из A. Порядок символов должен быть обратным по отношению к порядку 
элементов исходной последовательности. (Reverse, Select, First)

6. Дана последовательность положительных целых чисел. 
Обрабатывая только нечетные числа, получить последовательность их строковых представлений 
и отсортировать ее в лексикографическом порядке по возрастанию. (Where, Select, OrderBy)

7. Дана последовательность положительных целых чисел. Обрабатывая только нечетные числа, 
получить последовательность их строковых представлений и отсортировать ее 
в лексикографическом порядке по возрастанию. (Select, Where, Reverse)

8. Дана целочисленная последовательность. Получить последовательность чисел, 
каждый элемент которой равен произведению соответствующего элемента исходной 
последовательности на его порядковый номер (1, 2, …). В полученной последовательности 
удалить все элементы, не являющиеся двузначными, и поменять порядок оставшихся элементов на обратный. 
(Select, Where, Reverse)

9. Дана целочисленная последовательность. 
Среди всех элементов последовательности, оканчивающихся одной и той же цифрой, 
выбрать максимальный. Полученную последовательность максимальных элементов упорядочить по 
возрастанию их последних цифр. (GroupBy, Select, OrderBy)
 */

using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace HW_04
{
    public static class HW_04
    {
        /// <summary>
        /// 1. Дано целое число K (&gt; 0) и строковая последовательность A. 
        /// Строки последовательности содержат только цифры и буквы.
        /// Извлечь из A все строки длины K, оканчивающиеся цифрой,
        /// отсортировав их в лексикографическом порядке по возрастанию.
        /// (Используем Where, OrderBy, Last, char.IsDigit)
        /// </summary>
        public static IEnumerable<string> HW_04_01(this IEnumerable<string> A, int k) =>
            A.
            Where(s => s.Length == k && char.IsDigit( s.Last() )).
            OrderBy(s => s);

        /// <summary>
        /// 2. Дано целое число K (&gt; 0) и целочисленная последовательность A. 
        /// Начиная с элемента A с порядковым номером K, извлечь из A все нечетные двузначные числа,
        /// отсортировав их по убыванию. (SkipWhile, Where, OrderByDescending)
        /// </summary>
        /// <remarks>
        /// Не вижу ни причины, ни способа адекватно использовать здесь SkipWhile.
        /// Ошибка в задании?
        /// </remarks>
        public static IEnumerable<int> HW_04_02(this IEnumerable<int> A, int k) =>
            A.
            Skip(k).
            Where(n => n > 9 && n < 100 && n % 2 != 0).
            OrderByDescending(x => x);

        /// <summary>
        /// 3. Дано целое число D и целочисленная последовательность A. 
        /// Начиная с первого элемента A, большего D, извлечь из A все нечетные положительные числа,
        /// поменяв порядок извлеченных чисел на обратный. (SkipWhile, Where, OrderByDescending)
        /// </summary>
        /// <remarks>
        /// Какая связь между OrderByDescending и обратным порядком?
        /// Еще одна ошибка в задании?
        /// </remarks>
        public static IEnumerable<int> HW_04_03(this IEnumerable<int> A, int d) =>
            A.
            SkipWhile(n => n <= d).
            Where(n => n > 0 && n % 2 != 0).
            Reverse();

        /// <summary>
        /// 4. Даны целые числа D и K (K &gt; 0) и целочисленная последовательность A. 
        /// Найти объединение двух фрагментов A: первый содержит все элементы до первого элемента, большего D
        /// (не включая его), а второй — все элементы, начиная с элемента с порядковым номером K.
        /// Полученную последовательность (не содержащую одинаковых элементов) отсортировать по убыванию.
        /// (TakeWhile, Skip, OrderByDescending)
        /// </summary>
        public static IEnumerable<int> HW_04_04(this IEnumerable<int> A, int d, int k) =>
            A
            .TakeWhile(n => n <= d)
            .Union( A.Skip(k - 1) )
            .Distinct()
            .OrderDescending();

        /// <summary>
        /// 5. Дана последовательность непустых строк A. 
        /// Получить последовательность символов, каждый элемент которой является начальным символом
        /// соответствующей строки из A.Порядок символов должен быть обратным по отношению к порядку
        /// элементов исходной последовательности. (Reverse, Select, First)
        /// </summary>
        public static IEnumerable<char> HW_04_05(this IEnumerable<string> A) =>
            A
            .Select(str => str.First())
            .Reverse();

        /// <summary>
        /// 6. Дана последовательность положительных целых чисел. 
        /// Обрабатывая только нечетные числа, получить последовательность их строковых представлений
        /// и отсортировать ее в лексикографическом порядке по возрастанию. (Where, Select, OrderBy)
        /// </summary>
        public static IEnumerable<string> HW_04_06(this IEnumerable<int> A) =>
            A
            .Where(n => n % 2 != 0)
            .Select(n => n.ToString())
            .OrderBy(x => x);

        /// <summary>
        /// 7. Дана последовательность положительных целых чисел. 
        /// Обрабатывая только нечетные числа, получить последовательность их строковых представлений
        /// и отсортировать ее в лексикографическом порядке по возрастанию. (Select, Where, Reverse)
        /// </summary>
        /// <remarks>
        /// Повтор задания 6, но нужно использовать другой порядок LINQ методов?
        /// </remarks>
        public static IEnumerable<string> HW_04_07(this IEnumerable<int> A) =>
            A
            .Select(n => n.ToString())
            .Where(str => int.Parse(str) % 2 != 0)
            .OrderBy(x => x);

        /// <summary>
        /// 8. Дана целочисленная последовательность. Получить последовательность чисел, 
        /// каждый элемент которой равен произведению соответствующего элемента исходной
        /// последовательности на его порядковый номер(1, 2, …). В полученной последовательности
        /// удалить все элементы, не являющиеся двузначными, и поменять порядок оставшихся элементов на обратный.
        /// (Select, Where, Reverse)
        /// </summary>
        public static IEnumerable<int> HW_04_08(this IEnumerable<int> A) =>
            A
            .Select((n, i) => n * i)
            .Where(n => n > 9 && n < 100)
            .Reverse();

        /// <summary>
        /// 9. Дана целочисленная последовательность.
        /// Среди всех элементов последовательности, оканчивающихся одной и той же цифрой, 
        /// выбрать максимальный.Полученную последовательность максимальных элементов упорядочить по
        /// возрастанию их последних цифр. (GroupBy, Select, OrderBy)
        /// </summary>
        public static IEnumerable<int> HW_04_09(this IEnumerable<int> A) =>
            A
            .GroupBy(n => n % 10)
            .Select(group => group.Max())
            .OrderBy(n => n % 10);
    }
}
