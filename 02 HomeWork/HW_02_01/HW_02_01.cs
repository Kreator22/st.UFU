//Домашнее задание #2, индивидуальное задание 1
//https://edu.mmcs.sfedu.ru/mod/assign/view.php?id=18906

// 1. Даны три числа. Найти наименьшее из них.

// 2. Даны три переменные вещественного типа: A, B, C.
// Если их значения упорядочены по возрастанию, то удвоить их;
// в противном случае заменить значение каждой переменной на противоположное.

// 3. Дано целое число. Вывести его строку-описание вида «отрицательное четное число»,
// «нулевое число», «положительное нечетное число» и т. д.

// 4. Дано вещественное число A и целое число N (> 0).
// Используя один цикл, найти сумму
// 1 + A + A^2 + A^3 + ... + A^N

// 5. Дано целое число N (> 0). Используя один цикл, найти сумму
// 1! + 2! + 3! + ... + N!
// выражение N! — N–факториал — обозначает произведение всех целых чисел от 1 до N: N! = 1·2·…·N).
// чтобы избежать целочисленного переполнения, проводить вычисления с помощью вещественных переменных
// и вывести результат как вещественное число.

// 6. Дано целое число N (> 0).
// С помощью операций деления нацело и взятия остатка от деления определить,
// имеется ли в записи числа N цифра «2». Если имеется, то вывести true, если нет — вывести false.

// 7. Дано целое число N (> 1).
// Если оно является простым, т. е. не имеет положительных делителей, кроме 1 и самого себя,
// то вывести true, иначе вывести false.

namespace HW_02
{
    public class HW_02_01
    {
        /// <summary>
        /// 1. Даны три числа. Найти наименьшее из них.
        /// </summary>
        public static int HW_02_01_01(int a, int b, int c) =>
            a < b && a < c ? a :
            b < c ? b :
            c;

        /// <summary>
        /// 2. Даны три переменные вещественного типа: A, B, C.<br/>
        /// Если их значения упорядочены по возрастанию, то удвоить их;<br/>
        /// в противном случае заменить значение каждой переменной на противоположное.
        /// </summary>
        public static void HW_02_01_02(ref double a, ref double b, ref double c)
        {
            if (a < b && b < c)
            {
                a *= 2;
                b *= 2;
                c *= 2;
            }
            else
                (a, c) = (c, a);
        }

        /// <summary>
        /// 3. Дано целое число. <br/>
        /// Вывести его строку-описание вида «отрицательное четное число»,
        /// «нулевое число», «положительное нечетное число» и т. д.
        /// </summary>
        public static string HW_02_01_03(int n)
        {
            string s = "";

            s +=
                n > 0 ? "Положительное" :
                n < 0 ? "Отрицательное" :
                               "Нулевое";

            s += " ";

            s +=
                n == 0 ? "число" :
                n % 2 == 0 ? "четное число" :
                               "нечетное число";

            return s;
        }

        /// <summary>
        /// 4. Дано вещественное число A и целое число N (> 0).<br/>
        /// Используя один цикл, найти сумму<br/>
        /// 1 + A + A^2 + A^3 + ... + A^N<br/>
        /// </summary>
        public static double HW_02_01_04(double a, int n)
        {
            double result = 0;

            while (n >= 0)
            {
                //Console.WriteLine($"a = {a}, n = {n}, a^n = {Math.Pow(a, n)}");
                result += Math.Pow(a, n);
                n--;
            }

            return result;
        }

        /// <summary>
        /// 5. Дано целое число N (> 0). Используя один цикл, найти сумму <br/>
        /// 1! + 2! + 3! + ... + N! <br/>
        /// выражение N! — N–факториал — обозначает произведение всех целых чисел от 1 до N: N! = 1·2·…·N).
        /// чтобы избежать целочисленного переполнения, проводить вычисления с помощью вещественных переменных
        /// и вывести результат как вещественное число.
        /// </summary>
        public static double HW_02_01_05(double n)
        {
            double result = 0;
            double fac = 1;

            for (int i = 1; i <= n; i++)
            {
                fac *= i;
                result += fac;
            }

            return result;
        }

        /// <summary>
        /// 6. Дано целое число N (&gt; 0). <br/>
        /// С помощью операций деления нацело и взятия остатка от деления определить,
        /// имеется ли в записи числа N цифра «2».  <br/>
        /// Если имеется, то вывести true, если нет — вывести false.
        /// </summary>
        public static bool HW_02_01_06(int n)
        {
            do
            {
                (int Quotient, int Remainder) = int.DivRem(n, 10);

                if (Remainder == 2 || Remainder == -2)
                    return true;

                n = Quotient;
            }
            while (n != 0);

            return false;
        }

        /// <summary>
        /// 7. Дано целое число N (&gt; 1). <br/>
        /// Если оно является простым, т. е. не имеет положительных делителей, 
        /// кроме 1 и самого себя, то вывести true, иначе вывести false.
        /// </summary>
        public static bool HW_02_01_07(int n) =>
            (n == 2 || n == 3 || n == 5 || n == 7) ||
            !(n % 2 == 0 || n % 3 == 0 ||n % 5 == 0 ||n % 7 == 0);
    }
}
