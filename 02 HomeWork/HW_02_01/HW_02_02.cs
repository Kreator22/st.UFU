//Домашнее задание #2, индивидуальное задание 2
//https://edu.mmcs.sfedu.ru/mod/assign/view.php?id=18906

// 1. Даны три числа. Найти среднее из них (т. е. число, расположенное между наименьшим и наибольшим).

// 2. Даны три переменные вещественного типа: A, B, C.
// Если их значения упорядочены по возрастанию или убыванию, то удвоить их;
// в противном случае заменить значение каждой переменной на противоположное.
// Вывести новые значения переменных A, B, C.

// 3. Дано целое число, лежащее в диапазоне 1–999.
// Вывести его строку-описание вида «четное двузначное число», «нечетное трехзначное число» и т. д.

// 4. Дано вещественное число A и целое число N (> 0). Используя один цикл, найти значение выражения
// 1 − A + A^2 − A^3 + ... + (−1)^N * A^N

// 5. Дано целое число N (> 0). Используя один цикл, найти сумму
// 1/1! + 1/2! + 1/3!+ ... + 1/N!

// 6. Дано целое число N (> 0). С помощью операций деления нацело и взятия остатка от деления определить,
// имеются ли в записи числа N нечетные цифры. Если имеются, то вывести true, если нет — вывести false.

// 7.Даны целые положительные числа A и B.
// Найти их наибольший общий делитель (НОД), используя алгоритм Евклида:
// НОД(A, B) = НОД(B, A % B), если B != 0; НОД(A, 0) = A.

namespace HW_02
{
    public class HW_02_02
    {
        /// <summary>
        /// 1. Даны три числа. Найти среднее из них (т. е. число, расположенное между наименьшим и наибольшим).
        /// </summary>
        public static int HW_02_02_01(int a, int b, int c) =>
            (a > b && a < c) || (a < b && a > c) ? a :
            (b > a && b < c) || (b < a && b > c) ? b :
            c;

        /// <summary>
        ///  2. Даны три переменные вещественного типа: A, B, C. <br/>
        /// Если их значения упорядочены по возрастанию или убыванию, то удвоить их; <br/>
        /// в противном случае заменить значение каждой переменной на противоположное.
        /// Вывести новые значения переменных A, B, C.
        /// </summary>
        public static void HW_02_02_02(ref double a, ref double b, ref double c)
        {
            if ((a < b && b < c) || (a > b && b > c))
            {
                a *= 2;
                b *= 2;
                c *= 2;
            }
            else
                (a, c) = (c, a);
        }

        /// <summary>
        /// 3. Дано целое число, лежащее в диапазоне 1–999. <br/>
        /// Вывести его строку-описание вида «четное двузначное число», «нечетное трехзначное число» и т. д.
        /// </summary>
        public static string HW_02_02_03(int n)
        {
            string s = "";

            s +=
                n % 2 == 0 ?    "Четное" :
                n % 2 != 0 ?    "Нечетное" :
                                "Нулевое";

            s += " ";

            s +=
                n > 99 ?    "трехзначное число" :
                n > 9  ?    "двузначное число" :
                            "однозначное число";

            return s;
        }

        /// <summary>
        /// 4. Дано вещественное число A и целое число N (&gt; 0).  <br/>
        /// Используя один цикл, найти значение выражения <br/>
        /// 1 − A + A^2 − A^3 + ... + (−1)^N*A^N
        /// </summary>
        public static double HW_02_02_04(double a, int n)
        {
            double result = 0;         

            while (n >= 0)
            {
                int factor = n % 2 == 0 ? 1 : -1;
                result += (Math.Pow(a, n) * factor);
                n--;
            }

            return result;
        }

        /// <summary>
        /// 5. Дано целое число N (&gt; 0).  <br/>
        /// Используя один цикл, найти сумму <br/>
        /// 1/1! + 1/2! + 1/3!+ ... + 1/N!
        /// </summary>
        public static double HW_02_02_05(double n)
        {
            double result = 0;
            double fac = 1;

            for (int i = 1; i <= n; i++)
            {
                fac *= i;
                result += 1 / fac;
            }

            return result;
        }

        /// <summary>
        /// 6. Дано целое число N(&gt; 0). <br/>
        /// С помощью операций деления нацело и взятия остатка от деления определить,
        /// имеются ли в записи числа N нечетные цифры. <br/>
        /// Если имеются, то вывести true, если нет — вывести false.
        /// </summary>
        public static bool HW_02_02_06(int n)
        {
            do
            {
                (int Quotient, int Remainder) = int.DivRem(n, 10);

                if (Remainder % 2 != 0)
                    return true;

                n = Quotient;
            }
            while (n != 0);

            return false;
        }

        /// <summary>
        /// 7.Даны целые положительные числа A и B.<br/>
        /// Найти их наибольший общий делитель (НОД), используя алгоритм Евклида:<br/>
        /// НОД(A, B) = НОД(B, A % B), если B != 0; НОД(A, 0) = A.
        /// </summary>
        /// <remarks>
        /// Реализация без рекурсии.
        /// </remarks>
        public static long HW_02_02_07_01(long a, long b) 
        {
            while(true)
            {
                if (b > a)
                    (a, b) = (b, a);

                (long Quotient, long Remainder) = long.DivRem(a, b);

                if (Remainder == 0) return b;
                else if (Remainder > b) return 1;

                (a, b) = (b, Remainder);
            }
        }

        /// <summary>
        /// 7.Даны целые положительные числа A и B.<br/>
        /// Найти их наибольший общий делитель (НОД), используя алгоритм Евклида:<br/>
        /// НОД(A, B) = НОД(B, A % B), если B != 0; НОД(A, 0) = A.
        /// </summary>
        /// <remarks>
        /// Рекурсивная реализация.
        /// </remarks>
        public static long HW_02_02_07_02(long a, long b) =>
            b == 0 ? a : HW_02_02_07_02(b, a % b);
    }
}
